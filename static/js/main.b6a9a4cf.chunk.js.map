{"version":3,"sources":["components/Footer.js","components/Nav.js","components/CharacterCards.js","utils/queries.js","components/Cards.js","components/Search.js","pages/Landing.js","utils/objects.js","App.js","index.js"],"names":["Footer","className","Navtop","src","alt","CharacterCards","characters","title","length","map","character","image","name","status","gender","species","type","episode","air_date","id","QUERY_CHARACTER","gql","Cards","props","useQuery","variables","inputNameVar","loading","data","results","React","useState","Show","setShow","onClick","Search","inputName","setInputName","isShow","setIsShow","characterName","onSubmit","event","preventDefault","alert","value","onChange","target","placeholder","Landing","scoped","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","exact","path","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b6a9a4cf.chunk.js","sourcesContent":["// Importing a SCSS file\r\nimport \"../scss/footer.scss\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <footer>\r\n      <p className=\"textf\">&#169; Rick and Morty Test Right Reserved</p>\r\n    </footer>\r\n  );\r\n}\r\n","// import { Link } from \"react-router-dom\"; <-- if additional pages added\r\n// Import SCSS File Dependency\r\nimport \"../scss/colors.scss\";\r\nimport \"../scss/nav.scss\";\r\n\r\nexport default function Navtop() {\r\n  return (\r\n    <nav className=\"nav\">\r\n      {/* <Link className=\"links active\" to=\"/\"> */}\r\n      <img src=\"images/nav/rickandmorty.png\" alt=\"Rick and Morty\" />\r\n      {/* </Link> */}\r\n    </nav>\r\n  );\r\n}\r\n","// Importing a SCSS file\r\nimport \"../scss/card.scss\";\r\n\r\nconst CharacterCards = ({ characters, title }) => {\r\n  if (!characters.length) {\r\n    return <h3>No Characters With That Name.</h3>;\r\n  }\r\n  return (\r\n    <div className=\"characterCards\">\r\n      <h3 className=\"CardTitle\">{title}</h3>\r\n      <div className=\"\">\r\n        {characters &&\r\n          characters.map((character) => (\r\n            <div key={character.id} className=\"cards\">\r\n              <div className=\"characterImage\">\r\n                <img src={character.image} alt={character.name} />\r\n              </div>\r\n              <div className=\"characterText\">\r\n                <h4 className=\"characterName\">{character.name}</h4>\r\n                <p className=\"characterFacts\">\r\n                  Status:\r\n                  <span> {character.status}</span>\r\n                  <br />\r\n                  Gender: <span> {character.gender}</span>\r\n                  <br />\r\n                  Species: <span> {character.species}</span>\r\n                  <br />\r\n                  <span>{character.type}</span>\r\n                  <br />\r\n                  Prameire Episode:\r\n                  <br />\r\n                  <span>{character.episode[0].name}</span>\r\n                  <br />\r\n                  <span>{character.episode[0].air_date}</span>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharacterCards;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const QUERY_MORTY = gql`\r\n  query {\r\n    characters(filter: { name: \"Morty\" }) {\r\n      results {\r\n        id\r\n        name\r\n        status\r\n        species\r\n        type\r\n        gender\r\n        image\r\n        created\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CHARACTER = gql`\r\n  query ($name: String!) {\r\n    characters(filter: { name: $name }) {\r\n      results {\r\n        id\r\n        name\r\n        status\r\n        species\r\n        type\r\n        gender\r\n        image\r\n        episode {\r\n          name\r\n          air_date\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport CharacterCards from \"./CharacterCards.js\";\r\nimport Search from \"../components/Search\";\r\n// Importing a SCSS file\r\nimport \"../scss/card.scss\";\r\n// Importing Queries\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { QUERY_CHARACTER } from \"../utils/queries\";\r\n\r\nexport default function Cards(props) {\r\n  const { loading, data } = useQuery(QUERY_CHARACTER, {\r\n    variables: { name: props.inputNameVar },\r\n  });\r\n  const characters = data?.characters.results || [];\r\n\r\n  const [Show, setShow] = React.useState(true);\r\n\r\n  const closeCards = () => {\r\n    setShow(!Show);\r\n  };\r\n\r\n  // console.log(characters); <-- shows array of characters\r\n\r\n  return (\r\n    <>\r\n      {Show ? (\r\n        <div className=\"searchCard\">\r\n          {loading ? (\r\n            <div className=\"loading\">Loading...</div>\r\n          ) : (\r\n            <div>\r\n              <span onClick={closeCards} className=\"exitCard\">\r\n                &#10007;\r\n              </span>\r\n              {characters.length > 0 ? (\r\n                <CharacterCards\r\n                  characters={characters}\r\n                  title=\"The Multiverse\"\r\n                />\r\n              ) : (\r\n                <div className=\"loading\">Invalid Character</div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <Search />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Cards from \"../components/Cards.js\";\r\n// Importing a SCSS file\r\nimport \"../scss/search.scss\";\r\n\r\nexport default function Search() {\r\n  const [inputName, setInputName] = useState(0);\r\n  const [isShow, setIsShow] = React.useState(false);\r\n\r\n  const handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    setInputName({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // test alert\r\n    if (inputName === 0) {\r\n      alert(\"Please Enter a Character's Name\");\r\n    } else {\r\n      setIsShow(!isShow);\r\n      // JSON.stringify(inputName)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isShow ? (\r\n        <Cards inputNameVar={inputName.characterName} />\r\n      ) : (\r\n        <form onSubmit={handleSubmit} className=\"searchInputs\">\r\n          <input\r\n            value={inputName.characterName || \"\"}\r\n            onChange={handleChange}\r\n            type=\"text\"\r\n            name=\"characterName\"\r\n            placeholder=\"Character's Name\"\r\n            className=\"searchSection\"\r\n          />\r\n          <button type=\"submit\" className=\"searchIcon searchSection button\">\r\n            <img src=\"../images/search/pickle-rick.png\" alt=\"search Icon\" />\r\n          </button>\r\n        </form>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import Search from \"../components/Search\";\r\n// Importing a SCSS file\r\nimport \"../scss/landing.scss\";\r\n// Importing Objects\r\nimport { landingbackground } from \"../utils/objects\";\r\n\r\nexport default function Landing() {\r\n  return (\r\n    <section className=\"Landing\">\r\n      <style scoped>{landingbackground}</style>\r\n      <div className=\"backgimage background\">\r\n        <Search />\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","export const landingbackground = `\r\n.backgimage {\r\n    background-image: url(\"images/landing/rick-and-morty-portal.jpg\")\r\n}\r\n@media only screen and (min-width: 1920px) and (min-width: 1200px){\r\n    .backgimage {\r\n        background-image: url(\"images/landing/rick-and-morty-portal.jpg\")\r\n    }\r\n}\r\n@media only screen and (min-width: 1921px){\r\n    .backgimage {\r\n        background-image: url(\"images/landing/rick-and-morty-portal.jpg\")\r\n    }\r\n}\r\n`;\r\n","import { ApolloProvider, ApolloClient, InMemoryCache } from \"@apollo/client\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\n// Importing components\r\nimport Footer from \"./components/Footer\";\r\n// Importing Pages\r\nimport Nav from \"./components/Nav\";\r\nimport Landing from \"./pages/Landing\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"https://rickandmortyapi.com/graphql\",\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport default function App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <Nav />\r\n        <Route exact path=\"/\">\r\n          <Landing />\r\n        </Route>\r\n        <Footer />\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}